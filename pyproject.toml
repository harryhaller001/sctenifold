[build-system]
# Package build system
build-backend = "flit_core.buildapi"
requires = [ "flit-core>=3.2,<4" ]

[project]
# Project details
name = "scTenifold"
description = "scTenifold"
readme = { file = "README.md", content-type = "text/markdown" }

license = { file = "LICENSE" }

maintainers = [ { name = "harryhaller001", email = "harryhaller001@gmail.com" } ]

authors = [
    { name = "harryhaller001", email = "harryhaller001@gmail.com" },
    # Original author of https://github.com/qwerty239qwe/scTenifoldpy
    { name = "Yu-Te Lin", email = "qwerty239qwe@gmail.com" },
]

requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Typing :: Typed",
]
dynamic = [ "version" ]

dependencies = [
    "pandas",
    "numpy",
    "scipy",
    "setuptools",
    "typer",
    "PyYAML",
    "ray",
    "scikit-learn",
    "tensorly",
    "requests",
    "seaborn",
    "matplotlib",
    "networkx",
    "scanpy",
    "protobuf",
]

optional-dependencies.docs = [
    "ipython",                  # Required for syntax highlighing (https://github.com/spatialaudio/nbsphinx/issues/24)
    "myst-parser",
    "nbsphinx",
    "sphinx",
    "sphinx-autoapi",
    "sphinx-autodoc-typehints",
    "sphinx-book-theme",
]

optional-dependencies.test = [
    "coverage",
    "flit",
    "ipykernel",
    "ipython",
    "ipywidgets",
    "mypy",
    "pre-commit",
    "pytest",
    "ruff",
    "twine",
    "types-requests",
]

# Project urls
# urls.Documentation = "TODO"
# urls.Home-page = "TODO"
urls.Source = "https://github.com/harryhaller001/sctenifold"

# Entrypoints for flit (https://flit.pypa.io/en/latest/pyproject_toml.html#scripts-section)
scripts.scTenifold = "scTenifold.__main__:app"

[tool.flit.sdist]
include = [ "scTenifold/", "tests/" ]
exclude = [
    "docs/",
    "coverage",
    ".git/",
    ".github/",
    ".pre-commit-config.yaml",
    "Makefile",
    ".python-version",
    # "requirements.txt",
    ".vscode/",
]

[tool.ruff]
# Ruff formatter config
line-length = 120
extend-include = [ "*.ipynb" ]

format.docstring-code-format = true

lint.select = [
    "B",      # flake8-bugbear
    "BLE",    # flake8-blind-except
    "C4",     # flake8-comprehensions
    "D",      # pydocstyle
    "E",      # Error detected by Pycodestyle
    "F",      # Errors detected by Pyflakes
    "I",      # isort
    "RUF100", # Report unused noqa directives
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "W",      # Warning detected by Pycodestyle
]
lint.ignore = [
    "B008", # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "C408", # Ignore write dict as literal
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D105", # __magic__ methods are often self-explanatory, allow missing docstrings
    "D107", # Missing docstring in __init__
    # Disable one in each pair of mutually incompatible rules
    "D203", # We don’t want a blank line before a class docstring
    "D213", # <> We want docstrings to start immediately after the opening triple quote
    "D400", # first line should end with a period [Bug: doesn’t work with single-line docstrings]
    "D401", # First line should be in imperative mood; try rephrasing
    "E501", # line too long -> we accept long comment lines; formatter gets rid of long code lines
    "E731", # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E741", # allow I, O, l as variable names -> I is the identity matrix
]
lint.per-file-ignores."*/__init__.py" = [ "F401" ]
lint.per-file-ignores."docs/*" = [ "I" ]
lint.per-file-ignores."test/*" = [ "D" ]
lint.pydocstyle.convention = "google"

[tool.pyproject-fmt]
column_width = 120            # after how many column width split arrays/dicts into multiple lines, 1 will force always
indent = 4
keep_full_version = false     # if false will remove unnecessary trailing ``.0``'s from version specifiers
max_supported_python = "3.12" # maximum Python version to use when generating version specifiers

[tool.pytest.ini_options]
# Pytest config
minversion = "7.0"

log_format = "%(asctime)s %(levelname)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_level = "INFO"
log_cli = true

python_files = "test_*.py"
testpaths = [ "tests" ]

xfail_strict = true
addopts = [
    "--import-mode=importlib", # allow using test files with same name
]

[tool.coverage.run]
# Coverage config
source = [ "scTenifold" ]
omit = [ "*/tests/*" ]

[tool.coverage.report]
exclude_lines = [ "raise" ]
ignore_errors = true

[tool.coverage.html]
directory = "docs/coverage_report"

[tool.mypy]
# Mypy config (https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file)
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true

# Ignore libs which are not PEP 561 compliant
# [[tool.mypy.overrides]]
# module = [
# ]
# ignore_missing_imports = true
